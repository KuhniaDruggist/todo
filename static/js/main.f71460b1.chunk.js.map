{"version":3,"sources":["components/Todolist/Todolist.module.css","components/EditableSpan/EditableSpan.module.css","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","size","variant","value","label","helperText","onChange","e","currentTarget","onKeyPress","key","placeholder","Button","style","minWidth","marginTop","marginLeft","padding","disableElevation","onClick","EditableSpan","editMode","setEditMode","activateViewMode","changeTaskTitle","width","onBlur","autoFocus","className","styles","onDoubleClick","Todolist","buttonAll","filter","buttonActive","buttonCompleted","todoHeader","changeTodoTitle","todoListId","IconButton","removeTodoList","DeleteForever","addTask","list","tasks","map","task","isDone","id","Checkbox","color","checked","taskStatus","changeTaskStatus","type","removeTask","aria-label","HighlightOff","fontSize","filterButtons","changeFilter","App","todoListIdFirst","v1","todoListIdSecond","todoLists","setTodoLists","setTasks","t","tl","newTitle","newTask","taskList","tasksList","taskId","changeStatus","getTasksForRendering","todoList","todoListsForRendering","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","Container","fixed","marginBottom","newTodoListId","container","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f71460b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoHeader\":\"Todolist_todoHeader__3-9N7\",\"list\":\"Todolist_list__2gaEy\",\"isDone\":\"Todolist_isDone__1TRVa\",\"filterButtons\":\"Todolist_filterButtons__2jLJz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"EditableSpan_title__3NZ1p\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n    placeholder?: string\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState<string>('');\r\n    let [error, setError] = useState<string>('');\r\n\r\n    const addItem = () => {\r\n        if (!title) {\r\n            setError('Field is required!');\r\n            return;\r\n        }\r\n        props.addItem(title.trim());\r\n        setTitle('');\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error && e.key === ' ') {\r\n            return;\r\n        }\r\n\r\n        error && setError('');\r\n\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                value={title}\r\n                error={!!error}\r\n                label={error ? 'Error' : ''}\r\n                helperText={error}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                placeholder={props.placeholder}\r\n            />\r\n            <Button style={{\r\n                minWidth: '30px',\r\n                marginTop: '5px',\r\n                marginLeft: '10px',\r\n                padding: '4px 6px'\r\n            }} variant=\"contained\"\r\n                    size={'small'}\r\n                    disableElevation\r\n                    onClick={addItem}>Add\r\n            </Button>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport styles from './EditableSpan.module.css';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTaskTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [title, setTitle] = useState<string>('');\r\n    let [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode();\r\n        }\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.changeTaskTitle(title);\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField style={{width: '100%'}} value={title}\r\n                         onChange={onChangeHandler}\r\n                         onBlur={activateViewMode}\r\n                         onKeyPress={onKeyPressHandler}\r\n                         autoFocus\r\n            />\r\n            : <span className={styles.title} onDoubleClick={activateEditMode}>{props.title}</span>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport styles from './Todolist.module.css'\r\nimport {FilterValuesType} from '../../App';\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../EditableSpan/EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {DeleteForever, HighlightOff} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListId: string\r\n    tasks: TaskType[]\r\n    filter: FilterValuesType\r\n    changeTodoTitle: (title: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    addTask: (newTitle: string, todoListId: string) => void\r\n    removeTask: (taskId: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoListId: string) => void\r\n}\r\n\r\nfunction Todolist(props: TodolistPropsType) {\r\n    const removeTodoHandler = () => {\r\n        props.removeTodoList(props.todoListId);\r\n    }\r\n    const changeTodoTitle = (title: string) => {\r\n        props.changeTodoTitle(title, props.todoListId)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListId)\r\n    }\r\n    const onAllFilterHandler = () => props.changeFilter('all', props.todoListId);\r\n    const onActiveFilterHandler = () => props.changeFilter('active', props.todoListId);\r\n    const onCompletedFilterHandler = () => props.changeFilter('completed', props.todoListId);\r\n\r\n    const buttonAll = props.filter === 'all' ? 'primary' : 'default';\r\n    const buttonActive = props.filter === 'active' ? 'primary' : 'default';\r\n    const buttonCompleted = props.filter === 'completed' ? 'primary' : 'default';\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.todoHeader}>\r\n                <h3><EditableSpan title={props.title} changeTaskTitle={changeTodoTitle}/></h3>\r\n                <IconButton size=\"small\" onClick={removeTodoHandler}>\r\n                    <DeleteForever/>\r\n                </IconButton>\r\n            </div>\r\n            <AddItemForm placeholder=\"Add new task\" addItem={addTask}/>\r\n            <ul className={styles.list}>\r\n                {\r\n                    props.tasks.map(task => {\r\n                        const onClickHandler = () => props.removeTask(task.id, props.todoListId);\r\n                        const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            let taskStatus = e.currentTarget.checked;\r\n                            props.changeTaskStatus(task.id, taskStatus, props.todoListId);\r\n                        }\r\n                        const onChangeTaskTitle = (title: string) => {\r\n                            props.changeTaskTitle(task.id, title, props.todoListId)\r\n                        }\r\n\r\n                        return (\r\n                            <li className={task.isDone ? styles.isDone : ''} key={task.id}>\r\n                                <Checkbox size=\"small\"\r\n                                          color=\"secondary\"\r\n                                          checked={task.isDone}\r\n                                          onChange={onChangeStatusHandler}\r\n                                />\r\n                                <EditableSpan title={task.title} changeTaskTitle={onChangeTaskTitle}/>\r\n                                <IconButton size=\"small\" type=\"button\" onClick={onClickHandler} aria-label=\"delete\">\r\n                                    <HighlightOff fontSize=\"small\"/>\r\n                                </IconButton>\r\n                            </li>\r\n                        );\r\n                    })\r\n                }\r\n            </ul>\r\n            <div className={styles.filterButtons}>\r\n                <Button color={buttonAll}\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        disableElevation\r\n                        onClick={onAllFilterHandler}\r\n                >All\r\n                </Button>\r\n                <Button color={buttonActive}\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        disableElevation\r\n                        onClick={onActiveFilterHandler}\r\n                >Active\r\n                </Button>\r\n                <Button color={buttonCompleted}\r\n                        variant=\"contained\"\r\n                        size=\"small\"\r\n                        disableElevation\r\n                        onClick={onCompletedFilterHandler}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todolist;","import React, {useState} from 'react';\r\nimport Todolist, {TaskType} from './components/Todolist/Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n    let todoListIdFirst = v1();\r\n    let todoListIdSecond = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<TodolistType[]>([\r\n        {id: todoListIdFirst, title: 'What to learn', filter: 'active'},\r\n        {id: todoListIdSecond, title: 'What to read', filter: 'completed'}\r\n    ]);\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todoListIdFirst]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: false},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'React', isDone: true},\r\n            {id: v1(), title: 'Rest API', isDone: true},\r\n            {id: v1(), title: 'GraphQL ', isDone: true}\r\n        ],\r\n        [todoListIdSecond]: [\r\n            {id: v1(), title: 'Война и мир', isDone: false},\r\n            {id: v1(), title: 'Три товарища', isDone: true},\r\n            {id: v1(), title: 'На западном фронте без перемен', isDone: true}\r\n        ]\r\n    });\r\n\r\n    function addNewTodoList(title: string) {\r\n        let newTodoListId = v1();\r\n        let newTodoList: TodolistType = {id: newTodoListId, title, filter: 'all'}\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        setTodoLists(todoLists.filter(t => t.id !== todoListId));\r\n        delete tasks[todoListId];\r\n    }\r\n\r\n    function changeTodoTitle(title: string, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId\r\n            ? {...tl, title}\r\n            : tl));\r\n    }\r\n\r\n    function changeFilter(filter: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListId\r\n            ? {...tl, filter}\r\n            : tl));\r\n    }\r\n\r\n    function addTask(newTitle: string, todoListId: string) {\r\n        let newTask = {id: v1(), title: newTitle, isDone: false}\r\n        let taskList = tasks[todoListId];\r\n        tasks[todoListId] = [newTask, ...taskList]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(id: string, todoListId: string) {\r\n        let tasksList = tasks[todoListId];\r\n        tasks[todoListId] = tasksList.filter(task => task.id !== id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, title: string, todoListId: string) {\r\n        let taskList = tasks[todoListId]\r\n        tasks[todoListId] = taskList.map(t => t.id === taskId ? {...t, title} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListId: string) {\r\n        let taskList = tasks[todoListId]\r\n        tasks[todoListId] = taskList.map(t => t.id === taskId ? {...t, isDone} : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function getTasksForRendering(todoList: TodolistType): TaskType[] {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone)\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todoList.id]\r\n        }\r\n    }\r\n\r\n    const todoListsForRendering = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper style={{padding: '15px', width: '290px'}} elevation={5}>\r\n                    <Todolist\r\n                        todoListId={tl.id}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        tasks={getTasksForRendering(tl)}\r\n                        changeTodoTitle={changeTodoTitle}\r\n                        removeTodoList={removeTodoList}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeStatus}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Trello\r\n                    </Typography>\r\n                    <Button variant=\"outlined\" color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid style={{\r\n                    marginTop: '30px',\r\n                    marginBottom: '35px'\r\n                }}>\r\n                    <AddItemForm placeholder=\"Add new todo\" addItem={addNewTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListsForRendering}\r\n                </Grid>\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}